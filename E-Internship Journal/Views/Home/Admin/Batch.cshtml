@{
    ViewData["Title"] = "Manage Batch Page";
}
<div class="container-fluid">
    <!-- Breadcrumbs-->
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="~/Home/Index">Homepage</a>
        </li>
        <li class="breadcrumb-item active">Batch</li>
    </ol>
    <!-- Example DataTables Card-->
    <div class="card mb-3">
        <div class="card-header d-inline">
            <i class="fa fa-users fa-2x pull-left"></i> <h3>Batch</h3>
        </div>
        <div class="card-body">
            <div class="form-inline">
                <div class="col-12">
                    <div class="col-md-8 col-sm-8 col-xs-12 pull-left">
                        <button class="col-md-3 col-sm-3 col-xs-12 btn btn-primary" onclick="popCSV()" id="bulkadd">
                            + Bulk Add
                        </button>
                        &nbsp;
                        <button class="col-md-3 col-sm-3 col-xs-12 btn btn-danger" onclick="popbulkdel()" id="bulkdel">
                            - Bulk Delete
                        </button>
                        &nbsp;
                    </div>
                    <div class="col-md-3 col-sm-3 col-xs-12 pull-right">
                        <button class="col-12 btn btn-primary pull-right" id="addbatch" onclick="location.href='@Url.Action("createbatch", "Home")'">
                            + Add Batch
                        </button>
                    </div>
                    &nbsp;
                </div>
            </div>
            <br />
            <div class="table-responsive">
                <table class="table table-bordered" id="batch_dataTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th width="5%"><input name="select_all" value="1" type="checkbox" /></th>
                            <th class="B_Name">Batch Name</th>
                            <th class="C_Name">Course Name</th>
                            <th class="SLO_Assign">SLO Assigned</th>
                            <th class="S_Date">Start Date</th>
                            <th class="E_Date">End Date</th>
                            <th width="10%">Action</th>
                        </tr>
                        <tr id="filterrow">
                            <th></th>
                            <th class="B_Name">Batch Name</th>
                            <th class="C_Name">Course Name</th>
                            <th class="SLO_Assign">SLO Assigned</th>
                            <th class="S_Date">Start Date</th>
                            <th class="E_Date">End Date</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="form-group">
            <div class="col-12">
                <button class="btn btn-default pull-left" onclick="location.href='http://' + window.location.host +'/Home/Index'">
                    Back
                </button>
            </div>
        </div>
    </div>
    &nbsp;
</div>
<style>
    @@media only screen and (max-width: 768px) {
        .SLO_Assign, tr td:nth-child(4) {
            display: none;
            visibility: hidden;
        }
    }

    @@media only screen and (max-width: 420px) {
        .SLO_Assign, tr td:nth-child(4) {
            display: none;
            visibility: hidden;
        }

        .S_Date, tr td:nth-child(5) {
            display: none;
            visibility: hidden;
        }

        .E_Date, tr td:nth-child(6) {
            display: none;
            visibility: hidden;
        }
    }

    @@media only screen and (max-width: 320px) {
        .SLO_Assign, tr td:nth-child(4) {
            display: none;
            visibility: hidden;
        }

        .S_Date, tr td:nth-child(5) {
            display: none;
            visibility: hidden;
        }

        .E_Date, tr td:nth-child(6) {
            display: none;
            visibility: hidden;
        }
    }
</style>
<script>
    //
    // Updates "Select all" control in a data table
    //
    function updateDataTableSelectAllCtrl(table) {
        var $table = table.table().node();
        var $chkbox_all = $('tbody input[type="checkbox"]', $table);
        var $chkbox_checked = $('tbody input[type="checkbox"]:checked', $table);
        var chkbox_select_all = $('thead input[name="select_all"]', $table).get(0);

        // If none of the checkboxes are checked
        if ($chkbox_checked.length === 0) {
            chkbox_select_all.checked = false;
            if ('indeterminate' in chkbox_select_all) {
                chkbox_select_all.indeterminate = false;
            }

            // If all of the checkboxes are checked
        } else if ($chkbox_checked.length === $chkbox_all.length) {
            chkbox_select_all.checked = true;
            if ('indeterminate' in chkbox_select_all) {
                chkbox_select_all.indeterminate = false;
            }

            // If some of the checkboxes are checked
        } else {
            chkbox_select_all.checked = true;
            if ('indeterminate' in chkbox_select_all) {
                chkbox_select_all.indeterminate = true;
            }
        }
    }

    function hideFilter1() {
        $("#batch_dataTable thead input").val("");
        $("#batch_dataTable thead input").change();
        $('#batch_dataTable thead tr#filterrow').toggle();
    }

    function popCSV() {
        $('#uploadcsvModal').modal('show');
    }
    function popbulkdel() {
        swal({
            title: 'Bulk delete courses?',
            text: "You won't be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            confirmButtonText: 'Delete'
        }).then(function (result) {
            var ids = [];
            $('input[name="selectBatch"]').each(function () {
                if ($(this).prop('checked'))
                    ids.push($(this).val());
            });

            $.ajax({
                url: '/api/Batches/bulkDelete',
                method: 'PUT',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                cache: false,
                data: "'" + JSON.stringify(ids) + "'",
                success: function (data) {
                    swal({
                        type: data.AlertType,
                        title: data.Title,
                        html: data.Messages.join('<br><br>')
                    }).then(
                        function () {
                            window.location.reload();
                        });
                },
                error: function (data) {
                    swal({
                        type: 'error',
                        title: 'Error',
                        text: data.Message
                    });
                }
            });
        }).catch(swal.noop);
    }

    function stopPropagation(evt) {
        if (evt.stopPropagation !== undefined) {
            evt.stopPropagation();
        } else {
            evt.cancelBubble = true;
        }
    }
    $(document).ready(function () {
        // Array holding selected row IDs
        var rows_selected = [];
        var table = $('#batch_dataTable').DataTable({
            bSortable: false,
            //'fnDrawCallback': function (oSettings) {
            //    $('.dataTables_filter').(function () {
            //        $(this).append('<button class="btn btn-default mr-xs pull-right" type="button">Button');
            //    });
            //},
            dom: "<'row'<'col-sm-12'<f><'toolbar'>>><'row'<'col-sm-12'tr>>" +
            "<'row'<'col-sm-4'l><'col-sm-8'p>>",
            ajax: {
                url: '/Api/Batches/getAllBatches',
                dataSrc: ''
            },
            columnDefs: [{
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'width': '1%',
                'className': 'dt-body-center',
                'render': function (data, type, full, meta) {
                    return '<input type="checkbox" name="selectBatch" value="' + data + '">';
                }
            }],
            select: {
                style: 'os',
                selector: 'td:first-child'
            },
            order: [[1, 'asc']],
            'rowCallback': function (row, data, dataIndex) {
                // Get row ID
                var rowId = data[0];

                // If row ID is in the list of selected row IDs
                if ($.inArray(rowId, rows_selected) !== -1) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).addClass('selected');
                }
            },
            columns: [
                { data: "BatchId" },
                { data: "BatchName" },
                { data: "CourseName" },
                {
                    data: "UserList",
                    mRender: function (data) {
                        var SLOs = "";
                        for (i = 0; i < data.length; i++) {
                            SLOs += data[i];
                            if (i < (data.length - 1))
                                SLOs += ", ";
                        }

                        return SLOs;
                    }
                },
                {
                    data: "StartDate",
                    mRender: function (o) { return moment(o).format("DD/MM/YYYY") }
                },
                {
                    data: "EndDate",
                    mRender: function (o) { return moment(o).format("DD/MM/YYYY") }
                },
                {
                    data: "BatchId",
                    "bSortable": false,
                    "mRender": function (o) { return '<button class="btn btn-sm btn-primary" value="' + o + '"><i class="fa fa-pencil-square-o"></i></button>&nbsp<button class="btn btn-sm btn-danger" id="deletebtn" value="' + o + '"><i class="fa fa-trash"></i></button>' }
                }
            ],
            language: {
                emptyTable: "No Batch was found, please create one.",
            },
            initComplete: function () {
                $("div.toolbar")
                    .html('<div class="col-sm-4"><button class="btn btn-xs btn-default" onclick="hideFilter1()">Filter</button></div>');
                $("div.toolbar").parent().children().addClass("pull-right");
                hideFilter1();
            }
        });

        // Handle click on checkbox
        $('#batch_dataTable tbody').on('click', 'input[type="checkbox"]', function (e) {
            var $row = $(this).closest('tr');

            // Get row data
            var data = table.row($row).data();

            // Get row ID
            var rowId = data[0];

            // Determine whether row ID is in the list of selected row IDs
            var index = $.inArray(rowId, rows_selected);

            // If checkbox is checked and row ID is not in list of selected row IDs
            if (this.checked && index === -1) {
                rows_selected.push(rowId);

                // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
            } else if (!this.checked && index !== -1) {
                rows_selected.splice(index, 1);
            }

            if (this.checked) {
                $row.addClass('selected');
            } else {
                $row.removeClass('selected');
            }

            // Update state of "Select all" control
            updateDataTableSelectAllCtrl(table);

            // Prevent click event from propagating to parent
            e.stopPropagation();
        });

        // Handle click on table cells with checkboxes
        $('#batch_dataTable').on('click', 'tbody td, thead th:first-child', function (e) {
            $(this).parent().find('input[type="checkbox"]').trigger('click');
        });

        $('#batch_dataTable_filter').on('keyup change', 'input', function (e) {
            $('#batch_dataTable tbody input[type="checkbox"]:checked').trigger('click');
        });

        // Handle click on "Select all" control
        $('thead input[name="select_all"]', table.table().container()).on('click', function (e) {
            if (this.checked) {
                $('#batch_dataTable tbody input[type="checkbox"]:not(:checked)').trigger('click');
            } else {
                $('#batch_dataTable tbody input[type="checkbox"]:checked').trigger('click');
            }

            // Prevent click event from propagating to parent
            e.stopPropagation();
        });

        // Handle table draw event
        table.on('draw', function () {
            // Update state of "Select all" control
            updateDataTableSelectAllCtrl(table);
        });

        //handle custom search
        // Setup - add a text input to each footer cell
        $('#batch_dataTable thead tr#filterrow th').each(function () {
            if ($('#batch_dataTable thead tr#filterrow th').eq($(this).index()).text() != 0) {
                var title = $('#batch_dataTable thead th').eq($(this).index()).text();
                $(this).html('<input type="text" onclick="stopPropagation(event);" placeholder="Search ' + title + '" />');
            }
        });
        // Apply the filter
        $("#batch_dataTable thead input").on('keyup change', function () {
            if ($(this).attr('type') == "text") {
                table
                    .column($(this).parent().index() + ':visible')
                    .search(this.value)
                    .draw();
            }
        });
        //end of handle custom search

        //// Handle form submission event
        //$('#frm-example').on('submit', function (e) {
        //    var form = this;

        //    // Iterate over all selected checkboxes
        //    $.each(rows_selected, function (index, rowId) {
        //        // Create a hidden element
        //        $(form).append(
        //            $('<input>')
        //                .attr('type', 'hidden')
        //                .attr('name', 'id[]')
        //                .val(rowId)
        //        );
        //    });
        //});
        $('#batch_dataTable tbody').on('click', 'button.btn-primary', function (e) {
            setCookie("selectedBatch", $(this).val());
            location.href = 'EditBatch';
        });


        $('#batch_dataTable tbody').on('click', 'button.btn-danger', function (e) {
            var batchId = $(this).val();
            swal({
                title: 'Are you sure?',
                text: "This cannot be undone!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                confirmButtonText: 'Delete'
            }).then(function () {
                console.dir("Deleting batch");
                $.ajax({
                    url: '/Api/Batches/' + batchId,
                    method: 'DELETE',
                    dataType: 'json',
                    cache: false,
                    success: function (data) {
                        swal({
                            type: data.AlertType,
                            title: data.Title,
                            text: data.Message
                        }).then(function () {
                            window.location.reload();
                        });
                    },
                    fail: function (data) {
                        swal({
                            type: 'error',
                            title: 'Oops!',
                            text: data.Message
                        });
                    }
                });
            });
        });

        $('#submitcsv').click(function (e) {
            console.dir("Uploding CSV...");
            var fileUpload = $("#csv_upload").get(0);
            var files = fileUpload.files;
            var data = new FormData();
            for (var i = 0; i < files.length; i++) {
                data.append(files[i].name, files[i]);
            }
            $.ajax({
                method: 'POST',
                url: '/API/Batches/BulkAddBatch',
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: data,
                success: function (data) {
                    swal({
                        type: data.AlertType,
                        title: data.Title,
                        html: data.Messages.join('<br/><br/>')
                    }).then(function () {
                        window.location.reload();
                    });
                },
                fail: function (data) {
                    swal({
                        type: 'error',
                        title: 'Oops!',
                        text: data.responseJSON.Message
                    });
                }
            });
        });
    });

    function getCookie(name) {
        var dc = document.cookie;
        var prefix = name + "=";
        var begin = dc.indexOf("; " + prefix);
        if (begin == -1) {
            begin = dc.indexOf(prefix);
            if (begin != 0) return null;
        } else {
            begin += 2;
        }
        var end = document.cookie.indexOf(";", begin);
        if (end == -1) {
            end = dc.length;
        }
        return unescape(dc.substring(begin + prefix.length, end));
    }

    function setCookie(inName, inValue) {
        var exdate = new Date();
        var expiredays = 1;
        exdate.setHours(exdate.getHours() + 4);
        exdate.setDate(exdate.getDate());
        document.cookie = inName + "=" + inValue + ";path=/" + ((expiredays == null) ? "" : ";expires=" + exdate.toGMTString());
    };
</script>